
import React from 'react';
import { AlertTriangle, Check, Shield, Info } from 'lucide-react';

export type SeverityLevel = 'high' | 'medium' | 'low' | 'safe';

export interface Vulnerability {
  id: string;
  name: string;
  description: string;
  severity: SeverityLevel;
  details: string;
  remediation: string;
}

interface VulnerabilityResultProps {
  vulnerability: Vulnerability;
}

const VulnerabilityResult: React.FC<VulnerabilityResultProps> = ({ vulnerability }) => {
  const getIconAndClass = () => {
    switch (vulnerability.severity) {
      case 'high':
        return { 
          icon: <AlertTriangle className="w-5 h-5 text-red-500" />, 
          bgClass: 'scan-result-high'
        };
      case 'medium':
        return { 
          icon: <AlertTriangle className="w-5 h-5 text-orange-500" />, 
          bgClass: 'scan-result-medium'
        };
      case 'low':
        return { 
          icon: <Info className="w-5 h-5 text-yellow-500" />, 
          bgClass: 'scan-result-low'
        };
      case 'safe':
        return { 
          icon: <Check className="w-5 h-5 text-green-500" />, 
          bgClass: 'scan-result-safe'
        };
      default:
        return { 
          icon: <Shield className="w-5 h-5 text-cyber-primary" />, 
          bgClass: ''
        };
    }
  };

  const { icon, bgClass } = getIconAndClass();

  return (
    <div className={`cyber-panel ${bgClass} p-4 mb-4`}>
      <div className="flex items-start">
        <div className="mr-3 mt-1">{icon}</div>
        <div>
          <div className="flex flex-wrap justify-between items-center mb-2">
            <h3 className="text-lg font-bold">{vulnerability.name}</h3>
            <div className={`
              px-2 py-0.5 text-xs font-bold rounded
              ${vulnerability.severity === 'high' ? 'bg-red-500/20 text-red-500' : ''}
              ${vulnerability.severity === 'medium' ? 'bg-orange-500/20 text-orange-500' : ''}
              ${vulnerability.severity === 'low' ? 'bg-yellow-500/20 text-yellow-500' : ''}
              ${vulnerability.severity === 'safe' ? 'bg-green-500/20 text-green-500' : ''}
            `}>
              {vulnerability.severity.toUpperCase()}
            </div>
          </div>

          <p className="text-cyber-foreground/80 mb-3">{vulnerability.description}</p>
          
          <div className="bg-cyber-muted p-3 rounded mb-3">
            <p className="text-sm font-mono whitespace-pre-wrap break-all">{vulnerability.details}</p>
          </div>
          
          {vulnerability.severity !== 'safe' && (
            <div>
              <h4 className="font-bold mb-1 text-cyber-primary">Recommended Fix:</h4>
              <p className="text-sm text-cyber-foreground/80">{vulnerability.remediation}</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityResult;
